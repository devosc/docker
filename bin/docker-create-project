#!/usr/bin/env bash

source docker-build-env

args=("$@")
build=""
context=""
create_directory=""
default_host="docker-project"
default_name="docker-project"
directory="${PWD}"
docker_project_dir="$( cd "$(dirname "$0")/.." ; pwd -P )"
factory="composer_create_project"
host=""
image=""
ip="127.0.0.1"
name=""
options=("")
project=""
public_dir=""
work_dir=""
wp_cli=""
version=""

function usage()
{
    echo "Creates a new project from an existing Composer package. A Docker Compose file is generated and the project name is added to the /etc/hosts file.

Usage: docker-create-project [options] [package]

The following packages are available for convenience.

Package:
    cakephp                         CakePHP (cakephp/app)
    laravel                         Laravel (laravel/laravel)
    mvc5                            Mvc5 (mvc5/mvc5-application)
    phpinfo                         PHP info page
    symfony                         Symfony (symfony/website-skeleton)
    wordpress                       Wordpress (download from https://wordpress.org)
Options:
    --build                         Build the image before starting the container.
    --composer-options              Display Composer create-project options.
    --context                       Docker build context.
    --host                          Project host name.
    --image                         Docker image name.
    --project-directory PATH        Path to project directory. Created if it does not exist.
    --name                          Host name and container name for Compose file.
                                    Default is project directory name.
All of the Composer create-project options can be used."
}

if [[ "$1" = "--help" ]] || [[ "$1" = "-h" ]]; then
    usage
    exit
fi

for ((i=0; i < "$#"; ++i)); do
    case "${args[i]}" in
        --build )               build="--build"
                                unset "args[i]"
                                ;;
        --composer-options )    docker-php composer create-project --help
                                exit
                                ;;
        --context )             context="${args[i+1]}"
                                unset "args[i]" "args[i+1]"
                                i=$(expr ${i} + 1)
                                ;;
        --host )                host="${args[i+1]}"
                                unset "args[i]" "args[i+1]"
                                i=$(expr ${i} + 1)
                                ;;
        --image )               image="${args[i+1]}"
                                unset "args[i]" "args[i+1]"
                                i=$(expr ${i} + 1)
                                ;;
        --name )                name="${args[i+1]}"
                                unset "args[i]" "args[i+1]"
                                i=$(expr ${i} + 1)
                                ;;
        --project-directory )   directory="${args[i+1]}"
                                unset "args[i]" "args[i+1]"
                                i=$(expr ${i} + 1)
                                ;;
        -* )                    options+=("${args[i]}")
                                unset "args[i]"
                                ;;
        * )                     break
                                ;;
    esac
done

args=("${args[@]}")

if [[ -d "${directory}" ]]; then
    if [[ "${directory}" != "${PWD}" ]]; then
        echo "Error: Directory already exists."
        echo "Path: ${directory}"
        exit 1
    elif [[ -n "$(ls -A ${directory})" ]]; then
        echo "Error: Directory is not empty."
        echo "Path: ${directory}"
        exit 1
    fi
else
    create_directory=true
fi

[[ -z "${name}" ]] && name="$( basename "${directory}" )"

function composer_create_project()
{
    local directory="$1"
    local name="$2"
    local options="$3"
    local package="$4"
    local version="$5"

    docker-php --project-directory ${directory} composer ${options} create-project ${package} . ${version}

    if [[ $? != 0 ]]; then
        echo "An error occurred."
        exit 1
    fi
}

function composer_install()
{
    local directory="$1"

    if [[ ! -f "${directory}/composer.json" ]]; then
        return
    fi

    docker-php --project-directory ${directory} composer install

    if [[ $? != 0 ]]; then
        echo "An error occurred."
        exit 1
    fi
}

function create_docker_compose_file()
{
    local directory="$1"
    local context="$2"
    local name="$3"
    local host="$4"
    local image="$5"

    if [[ ! -f "${directory}/docker-compose.yml" ]]; then
        echo "Creating Docker Compose file: ${directory}/docker-compose.yml"
        cp "${docker_project_dir}/docker-compose.yml" "${directory}/docker-compose.yml"

        #volume for working directory
        sed -i.bak "s#\./www:/var/www#\.:/var/www#g" "${directory}/docker-compose.yml"
        rm "${directory}/docker-compose.yml.bak"

        [[ -z "${context}" ]] && context="${docker_project_dir}"
        [[ "${HOME}/docker" = "${context}" ]] && context="~/docker"
    fi

    if [[ -n "${context}" ]]; then
        echo "Context: ${context}"
        sed -i.bak "s#context: .*#context: ${context}#g" "${directory}/docker-compose.yml"
        sed -i.bak "s#\./www:/var/www#\.:/var/www#g" "${directory}/docker-compose.yml"
        rm "${directory}/docker-compose.yml.bak"
    fi

    echo "Container name: ${name}"
    sed -i.bak "s#container_name: .*#container_name: ${name}#g" "${directory}/docker-compose.yml"
    rm "${directory}/docker-compose.yml.bak"

    echo "Host: ${host}"
    sed -i.bak "s#Host:.*#Host:${host}#g" "${directory}/docker-compose.yml"
    rm "${directory}/docker-compose.yml.bak"

    if [[ -n "${public_dir}" ]]; then
        echo "Document root: /var/www/${public_dir}"
        sed -i.bak "s#APACHE_DOCUMENT_ROOT=/var/www/public#APACHE_DOCUMENT_ROOT=/var/www/${public_dir}#" "${directory}/docker-compose.yml"
        rm "${directory}/docker-compose.yml.bak"
    else
        echo "Document root: /var/www"
        sed -i.bak "s#APACHE_DOCUMENT_ROOT=/var/www/public#APACHE_DOCUMENT_ROOT=/var/www#" "${directory}/docker-compose.yml"
        rm "${directory}/docker-compose.yml.bak"
    fi

    if [[ -n "${work_dir}" ]]; then
        echo "Working directory: /var/www/${work_dir}"
        sed -i.bak "s#working_dir: /var/www#working_dir: /var/www/${work_dir}#" "${directory}/docker-compose.yml"
        rm "${directory}/docker-compose.yml.bak"
    fi

    if [[ -n "${image}" ]]; then
        echo "Docker image name: ${image}"
        sed -i.bak "s@#image: docker-project@image: ${image}@" "${directory}/docker-compose.yml"
        rm "${directory}/docker-compose.yml.bak"
    fi

    if [[ -n "${wp_cli}" ]]; then
        echo "Enabling WP-CLI"
        sed -i.bak "s@#- WP_CLI=true@- WP_CLI=true@" "${directory}/docker-compose.yml"
        rm "${directory}/docker-compose.yml.bak"
    fi
}

function create_host()
{
    local directory="$1"
    local host="$2"
    local ip="$3"

    if ! grep -q "${ip} ${host}$" /etc/hosts; then
        echo "Add the host name ${host} to your /etc/hosts file using:"
        echo "  echo \"${ip} ${host}\" | sudo tee -a /etc/hosts"
        read -p "Do you want to add it now? (sudo access required) [no|yes*] " create

        if [[ -z "${create}" ]] || [[ "${create}" = "yes" ]] || [[ "${create}" = "y" ]]; then

            echo "${ip} ${host}" | sudo tee -a /etc/hosts

            if [[ $? = 0 ]]; then
                echo "Host file updated."
            fi
        else
            echo "Skipping host file."
        fi
    else
        echo "Host exists: ${ip} ${host}";
    fi
}

function public_directory()
{
    local directory="$1"

    if [[ -d "${directory}/public" ]]; then
        public_dir="public"
    elif [[ -d "${directory}/html" ]]; then
        public_dir="html"
    fi
}

function git_clone()
{
    local directory="$1"
    local name="$2"
    local options="$3"
    local package="$4"

    docker-php --ssh-keys --project-directory ${directory} git clone ${options} ${package} .

    if [[ $? != 0 ]]; then
        echo "An error occurred."
        exit 1
    fi
}

function phpinfo()
{
    local directory="$1"
    local name="$2"

    mkdir -p "${directory}/public"

    cp "${docker_project_dir}/favicon.ico" "${directory}/public/favicon.ico"

    cat <<EOT >> "${directory}/public/index.php"
<?php

phpinfo();
EOT
}

function start_project()
{
    local build="$1"
    local directory="$2"

    docker-up ${build} --project-directory "${directory}" -a

    if [[ $? != 0 ]]; then
        echo "Error: could not start project container."
        exit 1
    fi
}

function wordpress()
{
    local directory="$1"
    local document_root="${directory}/${public_dir}"
    local name="$2"

    echo "Downloading: https://wordpress.org/latest.tar.gz"
    curl -O https://wordpress.org/latest.tar.gz
    tar -xzvf latest.tar.gz --directory ${directory}
    rm -rf "${document_root}"
    mv ${directory}/wordpress "${document_root}"
    rm latest.tar.gz

    proxy="\\
\\
// https://codex.wordpress.org/Administration_Over_SSL \\
define('FORCE_SSL_ADMIN', true); \\
\\
if ((\$_SERVER['HTTP_X_FORWARDED_PROTO'] ?? null) == 'https')\\
    \$_SERVER['HTTPS']='on';"

    sed -i.bak "s#define('WP_DEBUG', false);#define('WP_DEBUG', false);${proxy}#g" "${document_root}/wp-config-sample.php"
    rm "${document_root}/wp-config-sample.php.bak"

    echo "Default database settings:"
    echo "  host: mariadb database: wordpress user: root"
    read -p "Create default database? [yes|no*] " create_database

    if [[ "${create_database}" = "yes" ]] ||  [[ "${create_database}" = "y" ]]; then
        docker-services up
        docker exec mariadb sh -c "mysqladmin -uroot -p${DATABASE_ROOT_PASSWORD} drop wordpress --force"
        docker exec mariadb sh -c "mysqladmin -uroot -p${DATABASE_ROOT_PASSWORD} create wordpress"
    fi
}

if [[ -z "${args[0]}" ]]; then
    usage
    exit 1
else
    case "${args[0]}" in
        cakephp )   package="cakephp/app"
                    public_dir="webroot"
                    work_dir="webroot"
                    options=("--prefer-dist")
                    ;;
        laravel )   package="laravel/laravel"
                    options=("--prefer-dist")
                    ;;
        mvc5 )      package="mvc5/mvc5-application"
                    default_host="mvc5playground"
                    default_name="mvc5playground"
                    ;;
        phpinfo )   factory="phpinfo"
                    ;;
        symfony )   package="symfony/website-skeleton"
                    options=("--prefer-dist")
                    ;;
        wordpress ) factory="wordpress"
                    public_dir="html"
                    work_dir="html"
                    wp_cli="true"
                    ;;
        * )         package="${args[0]}"
                    ;;
    esac
fi

[[ -n "${args[1]}" ]] && version="${args[1]}"

if [[ -n "${create_directory}" ]]; then
    echo "Creating directory: ${directory}"
    mkdir -p ${directory}
fi

if [[ -z "${host}" ]]; then
    read -p "Enter a host name for the container: [${name}] " host

    [[ -z "${host}" ]] && host="${name}"
fi

[[ "${package}" == *".git" ]] && factory="git_clone"

echo "Creating Project: ${name}"
echo "Directory: ${directory}"
${factory} ${directory} ${name} "${options[@]}" ${package} ${version}
[[ "${factory}" != "composer_create_project" ]] && composer_install ${directory}
public_directory ${directory}
create_docker_compose_file ${directory} "${context}" ${name} ${host} ${image}
create_host ${directory} ${host} ${ip}
start_project "${build}" ${directory}
echo "Project URL: https://${host}"
