#!/usr/bin/env bash

source docker-build-env

args=("$@")
build=""
cmd="php"
composer_dir="-v ${COMPOSER_DIR}:/home/app/.composer"
directory="$(pwd)"
extra_hosts="${EXTRA_HOSTS}"
hosts=""
name="php-docker-project-cli"
no_cache=""
ssh_dir=""
tag="latest"
user="${USER_ID}:${GROUP_ID}"
work_dir="/app"

if [[ "$1" = "--help" ]] || [[ "$1" = "-h" ]]; then
    echo "A command line interface for PHP, Composer and Git.

Usage: docker-php [options] [cmd] [args...]

Runs an interactive shell when no arguments exist.

Commands:
    composer
    git
    phar
  * php
    phpdbg
    phpize
    phpunit
    php-config
Options:
    --add-host list             Add custom host-to-IP mapping, e.g example.com:192.168.10.10.
    --build                     Build image from Dockerfile.
    --no-cache                  Do not use cache when building the image.
    --project-directory PATH    Alternative working directory, default is current directory.
    --ssh-keys                  Mount user ssh directory."
    exit
fi

for ((i=0; i < "$#"; ++i)); do
    case "${args[i]}" in
        --add-host )            hosts="${hosts} --add-host ${args[i+1]}"
                                unset "args[i]" "args[i+1]"
                                i=$(expr ${i} + 1)
                                ;;
        --build )               build="--build"
                                unset "args[i]"
                                ;;
        --project-directory )   directory="${args[i+1]}"
                                unset "args[i]" "args[i+1]"
                                i=$(expr ${i} + 1)
                                ;;
        --no-cache )            no_cache="--no-cache"
                                unset "args[i]"
                                ;;
        --ssh-keys )            ssh_dir="-v ${HOME}/.ssh:/home/app/.ssh"
                                unset "args[i]"
                                ;;
    esac
done

args=("${args[@]}")

if [[ -z "${args[0]}" ]]; then
    args=("-a")
else
    case "${args[0]}" in
        composer|git|phar|php|phpdbg|phpize|phpunit|php-config )    cmd="${args[0]}"
                                                                    unset "args[0]"
                                                                    ;;
    esac
fi

image="${name}:${tag}"

if [[ -n "$build" ]] || [[ "$(docker images -q ${image} 2> /dev/null)" == "" ]]; then
    php_docker_dir="$( cd "$(dirname "$0")/.." ; pwd -P )"
    dockerfile="${php_docker_dir}/lib/php/Dockerfile"

    if [[ -f "${php_docker_dir}/.build-cli.env" ]]; then
        build_env_file="${php_docker_dir}/.build-cli.env"
    else
        build_env_file="${php_docker_dir}/.build.env"
    fi

    build_arg=""
    while read line ; do
        if [[ -n "${line}" ]] && [[ ! "$line" =~ "#" ]]; then
            build_arg="${build_arg} --build-arg ${line/export /}"
        fi
    done < "${build_env_file}"

    echo "Building image
    Args: ${build_env_file}
    Dockerfile: ${dockerfile}"

    docker build ${no_cache} ${build_arg} -t "${image}" -f "${dockerfile}" "${php_docker_dir}"

    if [[ $? != 0 ]]; then
        echo "An error occurred."
        exit 1
    fi
fi

volume="${directory}:${work_dir}"

if [[ -z "${hosts}" ]] && [[ -n "${extra_hosts}" ]]; then
    add=($(echo ${extra_hosts} | tr ',' "\n"))
    for ((i=0; i < "${#add[@]}"; ++i)); do
        hosts="${hosts} --add-host ${add[i]}"
    done
fi

docker run -it --rm --name "${name}" ${hosts} -v "${volume}" ${ssh_dir} ${composer_dir} -w "${work_dir}" -u "${user}" "${image}" ${cmd} "${args[@]}"
